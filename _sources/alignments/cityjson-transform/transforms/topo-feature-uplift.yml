transform:
  # Assign fragment ids to City Objects and format geometries (semantics surfaces/values)
  - |
    
    # CityJSON -> topoFeature type mapping
    # (note: Surface is used as an auxiliary type)
    def toTopoGeometry: {
      "MultiSurface": "MultiPolygon",
      "CompositeSurface": "MultiPolygon",
      "Solid": "Polyhedron",
      "MultiSolid": "MultiPolyhedron",
      "CompositeSolid": "MultiPolyhedron",
    } as $MAP | ($MAP[.] // .);

    # CityJSON geometry array contents mapping
    # (note: Surface is used as an auxiliary type)
    def nextGeometry: {
      "MultiPolyhedron": "Polyhedron",
      "Polyhedron": "MultiPolygon",
      "MultiPolygon": "Polygon",
      "Polygon": "LineString"
    } as $MAP | $MAP[.];

    # Accepts object with "references" (to inner geometries or vertices), "type", and optional "id"
    def processBoundaries: .type as $TYPE | .id as $ID | (.type | toTopoGeometry) as $TOPO_TYPE | ($TOPO_TYPE | nextGeometry) as $NEXT_TYPE | {
      "@type": "Feature",
      "@id": ($ID // empty),
      "geometry": null,
      "topology": {
        "type": $TOPO_TYPE,
        "references": (if (.type == "MultiPoint" or .type == "LineString") then (.references | map("#vertices-\(.)")) else (.references | to_entries | map({
            "type": $NEXT_TYPE,
            "id": (if $ID then "\($ID)_\(.key + 1)" else empty end),
            "references": .value
          } | processBoundaries)) end)
      },
      "properties": null
    };

    .CityObjects |= [
      to_entries | .[]
      | .value.parents |= if . then map("#:city-objects-\(.)") else empty end
      | { "@id": "#city-objects-\(.key | @uri)", "dct:identifier": .key } + .value
      | ."@id" as $OBJECT_ID
      | .geometry |= if . then ([ .[] |
        .type as $GEOM_TYPE | .boundaries as $BOUNDARIES | (try (.semantics.values | to_entries) catch []) as $INDEXES
        | {
          "surfaces": (if .semantics.surfaces
            then [.semantics.surfaces | to_entries | .[] | .key as $IDX
              | .value + {
                "@type": (if .type then [$GEOM_TYPE, .type] else $GEOM_TYPE end),
                "boundaries": ({"type": $GEOM_TYPE, "id": "\($OBJECT_ID)_geom_\($IDX)", "references": [$BOUNDARIES | .[$INDEXES | map(if .value == $IDX then .key else empty end) | .[]]]} | processBoundaries)
              }]
            else [{"@type": $GEOM_TYPE, "boundaries": ({"type": $GEOM_TYPE, "id": "\($OBJECT_ID)_geom_0", "references": $BOUNDARIES} | processBoundaries)}]
            end),
          "lod": "\(.lod)"
        }
      ]) else empty end
    ]
    | . + {
      "@id": "#city"
    }
  # Format coordinates and assign fragment ids to vertices
  - |
    def to_coords: if . then { "city:x": .[0], "city:y": .[1], "city:z": .[2] } else empty end ;
    (.transform.scale |= to_coords) | (.transform.translate |= to_coords)
    | .metadata.geographicalExtent |= if . then { 
      "city:min": .[0:3] | to_coords,
      "city:max": .[3:6] | to_coords
    } else empty end
    | .vertices |= [to_entries | .[] | { 
        "@id": "#vertices-\(.key | @uri)",
        "type": "Feature",
        "geometry": {
          "@type": "Point",
          "geojson:coordinates": .value
        },
        "properties": (.value | to_coords), 
      }]

context:
  $:
    '@version': 1.1
    '@base': https://example.com/city-topo-feature
    c: https://example.com/city-topo-feature#

    city: http://example.com/vocab/city/
    attr: http://example.com/vocab/city/attr#
    dct: http://purl.org/dc/terms/
    xsd: http://www.w3.org/2001/XMLSchema#
    gml: http://www.opengis.net/ont/gml#
    geojson: https://purl.org/geojson/vocab#

    CityJSON: city:City

    type: '@type'
    id: dct:identifier
    version: city:version

    attributes: '@nest'

    CityObjects:
      '@id': city:hasObject
      '@context':
        # City Objects
        Bridge: city:Bridge
        BridgeConstructiveElement: city:BridgeConstructiveElement
        BridgeFurniture: city:BridgeFurniture
        BridgeInstallation: city:BridgeInstallation
        BridgePart: city:BridgePart
        BridgeRoom: city:BridgeRoom
        Building: city:Building
        BuildingConstructiveElement: city:BuildingConstructiveElement
        BuildingFurniture: city:BuildingFurniture
        BuildingInstallation: city:BuildingInstallation
        BuildingPart: city:BuildingPart
        BuildingRoom: city:BuildingRoom
        BuildingStorey: city:BuildingStorey
        BuildingUnit: city:BuildingUnit
        CityFurniture: city:CityFurniture
        CityObjectGroup: city:CityObjectGroup
        ExtensionObject: city:ExtensionObject
        LandUse: city:LandUse
        OtherConstruction: city:OtherConstruction
        PlantCover: city:PlantCover
        Railway: city:Railway
        Road: city:Road
        SolitaryVegetationObject: city:SolitaryVegetationObject
        TINRelief: city:TINRelief
        TransportSquare: city:TransportSquare
        Tunnel: city:Tunnel
        TunnelConstructiveElement: city:TunnelConstructiveElement
        TunnelFurniture: city:TunnelFurniture
        TunnelHollowSpace: city:TunnelHollowSpace
        TunnelInstallation: city:TunnelInstallation
        TunnelPart: city:TunnelPart
        WaterBody: city:WaterBody
        Waterway: city:Waterway
        _AbstractBuilding: city:_AbstractBuilding
        _AbstractCityObject: city:_AbstractCityObject
        _AbstractTransportationComplex: city:_AbstractTransportationComplex
        '+GenericCityObject': https://www.cityjson.org/extensions/download/generic.ext.json#GenericCityObject

        function: city:hasFunction
        usage: city:hasUsage

        Feature: geojson:Feature
        
        geometry:
          '@id': city:hasGeometry
          '@context':
            # Geometry Objects
            GeometryInstance: city:GeometryInstance
            Semantics: city:Semantics

            CompositeSolid: gml:CompositeSolid
            CompositeSurface: gml:CompositeSurface
            MultiLineString: gml:MultiLineString
            MultiPoint: gml:MultiPoint
            MultiSolid: gml:MultiSolid
            MultiSurface: gml:MultiSurface
            Solid: gml:Solid

            # Geometric primitives
            RoofSurface: city:RoofSurface
            GroundSurface: city:GroundSurface
            WallSurface: city:WallSurface
            ClosureSurface: city:ClosureSurface
            OuterCeilingSurface: city:OuterCeilingSurface
            OuterFloorSurface: city:OuterFloorSurface
            Window: city:Window
            Door: city:Door
            InteriorWallSurface: city:InteriorWallSurface
            CeilingSurface: city:CeilingSurface
            FloorSurface: city:FloorSurface
            WaterSurface: city:WaterSurface
            WaterGroundSurface: city:WaterGroundSurface
            WaterClosureSurface: city:WaterClosureSurface
            TrafficArea: city:TrafficArea
            AuxiliaryTrafficArea: city:AuxiliaryTrafficArea
            TransportationHole: city:TransportationHole
            TransportationMarking: city:TransportationMarking

            # Appearance Objects
            Material: city:Material
            Texture: city:Texture

            lod:
              '@id': city:lod
            surfaces:
              '@id': city:hasSurface
              '@context':
                '@vocab': http://example.com/vocab/city/attr#
            boundaries:
              '@id': city:boundaries
              '@container': '@list'
              '@type': '@id'

            # Topo-feature
            topology:
              '@type': '@id'
              '@id': geojson:topology
              '@context':
                references:
                  '@id': geojson:relatedFeatures
                  '@type': '@id'
                  '@container': '@list'
                GeometryCollection: geojson:GeometryCollection
                LineString: geojson:LineString
                MultiLineString: geojson:MultiLineString
                MultiPoint: geojson:MultiPoint
                MultiPolygon: geojson:MultiPolygon
                Point: geojson:Point
                Polygon: geojson:Polygon
                Polyhedron: geojson:Polyhedron
                MultiPolyhedron: geojson:MultiPolyhedron
                Prism:
                  '@id': geojson:Prism
                  '@context':
                    base: geojson:prismBase
                    lower: geojson:prismLower
                    upper: geojson:prismUpper
                MultiPrism:
                  '@id': geojson:MultiPrism
                  '@context':
                    prisms: geojson:prisms
        parents:
          '@id': city:hasParent
          '@type': '@id'
        children:
          '@id': city:hasChild
          '@type': '@id'

    'city:x':
      '@id': city:x
      '@type': xsd:decimal
    'city:y':
      '@id': city:y
      '@type': xsd:decimal
    'city:z':
      '@id': city:z
      '@type': xsd:decimal

    transform:
      '@id': city:hasTransform
      '@context':
        scale: city:scale
        translate: city:translate

    metadata:
      '@id': '@nest'
      '@context':
        identifier: dct:identifier
    geographicalExtent: city:geographicalExtent

    vertices:
      '@id': city:hasVertex
      '@context':
        properties: '@nest'
        geometry: city:hasGeometry
        Point: geojson:Point

    extensions:
      '@id': city:hasExtension
      '@container': '@index'
      '@index': dct:identifier
      '@context':
        url: '@id'
        version: dct:version